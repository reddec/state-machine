// Package storage contains the types for schema 'public'.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Alias represents a row from 'public.alias'.
type Alias struct {
	ID        int64  `json:"id"`         // id
	Namespace string `json:"namespace"`  // namespace
	ContextID string `json:"context_id"` // context_id
	Alias     string `json:"alias"`      // alias

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Alias exists in the database.
func (a *Alias) Exists() bool {
	return a._exists
}

// Deleted provides information if the Alias has been deleted from the database.
func (a *Alias) Deleted() bool {
	return a._deleted
}

// Insert inserts the Alias to the database.
func (a *Alias) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.alias (` +
		`"namespace", "context_id", "alias"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, a.Namespace, a.ContextID, a.Alias)
	err = db.QueryRow(sqlstr, a.Namespace, a.ContextID, a.Alias).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Alias in the database.
func (a *Alias) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.alias SET (` +
		`"namespace", "context_id", "alias"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "id" = $4`

	// run query
	XOLog(sqlstr, a.Namespace, a.ContextID, a.Alias, a.ID)
	_, err = db.Exec(sqlstr, a.Namespace, a.ContextID, a.Alias, a.ID)
	return err
}

// Save saves the Alias to the database.
func (a *Alias) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Alias.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Alias) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.alias (` +
		`"id", "namespace", "context_id", "alias"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "namespace", "context_id", "alias"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."namespace", EXCLUDED."context_id", EXCLUDED."alias"` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Namespace, a.ContextID, a.Alias)
	_, err = db.Exec(sqlstr, a.ID, a.Namespace, a.ContextID, a.Alias)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Alias from the database.
func (a *Alias) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.alias WHERE "id" = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AliasByAliasNamespace retrieves a row from 'public.alias' as a Alias.
//
// Generated from index 'alias_alias_namespace_key'.
func AliasByAliasNamespace(db XODB, alias string, namespace string) (*Alias, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "namespace", "context_id", "alias" ` +
		`FROM public.alias ` +
		`WHERE "alias" = $1 AND "namespace" = $2`

	// run query
	XOLog(sqlstr, alias, namespace)
	a := Alias{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, alias, namespace).Scan(&a.ID, &a.Namespace, &a.ContextID, &a.Alias)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AliasByID retrieves a row from 'public.alias' as a Alias.
//
// Generated from index 'alias_pkey'.
func AliasByID(db XODB, id int64) (*Alias, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "namespace", "context_id", "alias" ` +
		`FROM public.alias ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	a := Alias{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Namespace, &a.ContextID, &a.Alias)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
