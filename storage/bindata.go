// Code generated by go-bindata.
// sources:
// init.sql
// DO NOT EDIT!

package storage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xb3\x30\x10\xbc\xfb\x29\xf6\x98\x48\x79\x83\x9c\x9c\x2f\x9b\xaf\x56\x89\x93\x82\x51\x93\x5e\x2c\x0b\x56\x15\x6a\xf9\x91\xed\x56\x7d\xfc\x0a\x08\x35\x20\x5a\xc5\x37\xaf\x77\x66\xd6\x33\xfb\x2f\x46\xae\x10\x14\xdf\x45\x08\xe2\x00\xf2\xa4\x00\x2f\x22\x51\x09\x38\x6f\x3c\xc1\x8a\x01\x14\x39\x4c\xcf\x4e\xfc\x4f\x30\x16\x3c\x9a\xd5\x3b\xb8\x4c\xa3\x08\xce\xb1\x38\xf2\xf8\x0a\x8f\x78\xdd\x30\x80\xca\x94\xe4\x1a\x93\xd1\xd0\xa8\xf0\xa2\xe6\xe0\x09\x43\x8b\xca\xea\xca\xd3\x97\xd7\x3f\xfa\xf7\xa1\x2c\x19\x4f\xb9\x36\x7e\x40\x89\x23\x26\x8a\x1f\xcf\xf0\x2c\xd4\x43\x77\x85\x97\x93\xc4\x30\xed\x1e\x0f\x3c\x8d\x14\x64\x1f\xd6\x52\xe5\xb5\x2f\x4a\x72\xde\x94\x4d\xcb\xd7\xfb\x30\x3a\x42\x2e\x0f\x31\x99\x22\x37\xde\x4c\x3d\xbb\x2a\xe4\xed\x0b\x7d\x52\xe5\x17\x5f\x1a\x5b\x67\xe4\x5c\x51\xbd\x6a\xb2\xb6\xb6\xdd\x7f\xd9\x7a\xcb\xd8\x1f\x31\x99\xf7\xc2\xb8\x79\x4c\x21\xa0\x3b\x12\x09\xae\xfe\x62\xfe\x72\x43\x2f\x3c\xcb\x65\xdc\x90\x4a\xf1\x94\x22\xac\xba\xc6\x4d\x50\x5c\x8f\xbf\x24\xe4\x1e\x2f\x4b\x9b\xa7\xc3\x00\x0c\xe0\x24\x87\x7d\x0c\xe5\x96\x65\xa0\xb9\x69\x2d\xb1\x75\xf2\xba\x69\xde\x7a\x9a\x9b\x5f\x81\x66\xd3\x97\xd6\xb0\xfd\x0e\x00\x00\xff\xff\x71\x73\x51\x45\x0d\x03\x00\x00")

func initSqlBytes() ([]byte, error) {
	return bindataRead(
		_initSql,
		"init.sql",
	)
}

func initSql() (*asset, error) {
	bytes, err := initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init.sql", size: 781, mode: os.FileMode(436), modTime: time.Unix(1535368805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init.sql": initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"init.sql": &bintree{initSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
