// Code generated by go-bindata.
// sources:
// init.sql
// DO NOT EDIT!

package storage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x4f\x84\x30\x10\x85\xef\xfd\x15\x73\x74\x93\xfd\x07\x7b\xea\xba\xb3\xda\x08\x65\x85\x12\xc1\x4b\xd3\x40\x63\x88\x2e\x90\x32\x1a\x7f\xbe\x01\x64\x0b\x84\x18\x7b\xeb\x34\xef\xeb\x7b\x2f\x73\x1f\x23\x57\x08\x8a\x1f\x03\x04\x71\x06\x19\x29\xc0\x4c\x24\x2a\x81\x8e\x0c\x59\xb8\x63\x00\x55\x09\xcb\x73\x14\x0f\x09\xc6\x82\x07\xab\xf9\x20\x97\x69\x10\xc0\x25\x16\x21\x8f\x73\x78\xc2\x7c\xcf\x00\x8a\xa6\x26\xfb\x4d\xfa\x46\x52\x98\xa9\xb5\x78\x41\x18\x54\xce\x1a\xb2\xa5\x36\x34\xa9\x44\x88\x89\xe2\xe1\x05\x5e\x84\x7a\x1c\xae\xf0\x1a\x49\xf4\xff\x9e\xf0\xcc\xd3\x40\x41\xf1\xe9\x9c\xad\x49\x53\x75\xb5\x1d\x99\x6b\xdb\xf3\xc6\x44\xb3\x23\xe4\xb6\x89\x85\x8b\xd2\x90\x59\xa6\xcf\x15\xf2\xfe\xc5\x7e\xd9\x9a\x36\x5f\x5a\xd7\x14\xb6\xeb\xaa\xfa\x4d\x5b\xe7\x1a\x37\xe4\x65\xbb\x03\x63\x7f\x14\x6e\x3e\x2a\xd3\xad\x0b\xf7\x55\xff\xa3\x5b\xdf\xea\x3c\xc0\xc8\x5d\xd5\x7e\xa3\xa5\x52\x3c\xa7\x38\xf7\x26\xe4\x09\xb3\xad\x65\xd0\xfe\x2b\x06\x10\xc9\x69\x45\xfc\xb8\xa7\x4c\x98\x11\xbc\x49\x1b\x1c\xe9\xb6\x7d\x1f\x31\xbf\xc1\x3d\x66\x3f\x8e\x76\x70\xf8\x09\x00\x00\xff\xff\xce\x9a\x29\x75\xa0\x02\x00\x00")

func initSqlBytes() ([]byte, error) {
	return bindataRead(
		_initSql,
		"init.sql",
	)
}

func initSql() (*asset, error) {
	bytes, err := initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init.sql", size: 672, mode: os.FileMode(436), modTime: time.Unix(1535032304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init.sql": initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"init.sql": &bintree{initSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
