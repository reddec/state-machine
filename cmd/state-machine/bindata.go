// Code generated by go-bindata.
// sources:
// templates/init.gotemplate
// templates/state.gotemplate
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesInitGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6f\xc3\x20\x10\x85\x77\x7e\xc5\xc9\x13\x8e\x5c\xbc\x57\xea\x94\x39\x51\xa5\x54\x5d\xaa\xaa\xa2\xf8\xe2\xa0\x04\xb0\x0e\xec\x24\xb5\xf8\xef\x95\x6d\x1a\xc5\x49\xea\x05\x73\xc0\xf7\xde\xbb\x6b\xa4\xda\xcb\x1a\xa1\xef\xc5\xeb\xf4\x1b\x23\x63\xda\x34\x8e\x02\x70\x06\x00\x90\xd5\x3a\xec\xda\x6f\xa1\x9c\x29\x09\xab\x0a\x55\xe9\x83\x0c\xf8\x64\xa4\xda\x69\x8b\x65\x5a\xb3\xbb\xdb\xcd\xbe\x2e\x91\xc8\x91\x4f\x67\xca\xd9\x80\xa7\x90\xb1\x9c\xb1\x6d\x6b\x15\xf0\x86\x60\xd1\xf7\xe2\xed\xdc\x60\x8c\x39\x68\xab\x83\x96\x07\xfd\x83\x9b\x41\x82\xab\x70\x82\xf4\x48\x2c\xa7\xb5\x80\x51\x3d\xed\x60\x91\xd4\xc5\xe6\xaa\x9a\x03\x9f\x95\x0b\x18\x6d\xe4\xd0\x8f\x3e\x08\x43\x4b\x76\xc6\x11\xcb\x96\x08\x6d\x48\x37\xbd\x58\xe3\x91\x67\x17\x3b\x32\x68\x67\xc1\xba\x00\x67\x0c\xa0\x4d\x73\x40\x83\x36\x60\x95\xe5\x2c\x32\xd6\x49\x82\x9d\xb4\xd5\x01\xc9\xf7\xbd\x58\x4b\x83\x31\xc2\xc7\xe7\x90\x91\x77\xe6\xc6\xe4\x6a\xda\x14\xd0\x90\x53\xe8\xbd\x9b\xf5\x20\x75\xe6\x82\x59\xe3\xf1\x7d\xc5\x7d\x70\x34\xcc\x69\x06\xda\x4c\xc5\x7f\x40\x8f\x55\x53\x0b\x3a\x03\xcf\x2f\x17\xda\x10\xd6\xdf\xc1\xc4\xcd\x34\xf2\xf1\xe5\xd6\x11\x7c\x15\x7f\x71\x07\x0a\x49\x5b\xe3\x83\xfc\x93\xd2\xf0\xa5\x33\xde\x99\x2b\xfc\x84\x8b\xd7\x13\xe9\x0c\x8b\xbf\x01\x00\x00\xff\xff\x96\xe1\x3b\xfc\x92\x02\x00\x00")

func templatesInitGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesInitGotemplate,
		"templates/init.gotemplate",
	)
}

func templatesInitGotemplate() (*asset, error) {
	bytes, err := templatesInitGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/init.gotemplate", size: 658, mode: os.FileMode(436), modTime: time.Unix(1534751145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6e\xe3\x30\x0c\xbc\xeb\x2b\x08\x9f\xe4\xc0\x2b\xdf\x17\xc8\x29\x7b\xdd\xa4\x68\xf3\x03\xae\xcc\x3a\x42\xa2\x07\x24\x3a\x4d\x20\xe8\xdf\x0b\xcb\x6a\x13\x27\xf5\x45\x26\x39\x9c\x19\x92\xae\x93\xc7\x6e\x40\x88\x51\xbc\xcc\xbf\x29\x31\xa6\xb4\xb3\x9e\x80\x33\x00\x80\x6a\x50\x74\x18\xdf\x85\xb4\xba\xf5\xd8\xf7\x28\xdb\x40\x1d\xe1\x1f\xdd\xc9\x83\x32\xd8\x96\xb7\x7a\x42\xbb\xe3\xd0\xa2\xf7\xd6\x87\x52\x93\xd6\x10\x5e\xa8\x62\x35\x63\xd2\x9a\x40\x93\xee\xb6\xd3\x98\x52\x8c\xe2\x6d\x62\x4d\x09\x0a\xdf\x1c\xc3\x3a\x63\x46\x3d\xf9\xfa\x18\x8d\x04\xee\x3c\xac\x62\x14\xfb\xab\xc3\x94\x6a\xc8\x66\x6e\xed\x5c\xd2\x05\x8a\x90\xd8\xcc\x6f\x33\x83\x4a\x04\xab\x85\x42\xc9\xd6\xc0\x17\xe9\x06\xb2\xf5\x1a\x62\xf6\xde\xb6\xb0\xdf\xfd\xdb\xfd\x05\xa5\xdd\x09\x35\x9a\xec\xbd\x68\x66\x84\x47\x1a\xbd\x59\x28\x89\xcd\xe8\x3d\x1a\x2a\x5c\x41\x6c\xf1\x93\x57\x77\xa3\x1e\x3a\xd3\x9f\xd0\x83\xb1\x04\x57\xa4\x1b\x39\xf6\x55\xcd\x12\x2b\x23\x2b\xa3\x88\x7f\x3b\x29\x3d\xe1\x67\x75\xb0\x86\xce\x39\x34\x3d\x7f\x2a\x35\x30\xf5\xf3\xb3\x7e\x98\xf9\xff\x1c\x34\xe0\xbc\x95\x18\x82\x5d\xae\x74\x16\x9a\xbe\xb3\x16\xaf\x38\xa8\x40\xe8\xf9\x2f\xb7\xba\x23\x10\x0f\x77\xa8\x33\x47\xaa\x59\xfa\x0a\x00\x00\xff\xff\x9e\x22\x36\x89\x64\x02\x00\x00")

func templatesStateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesStateGotemplate,
		"templates/state.gotemplate",
	)
}

func templatesStateGotemplate() (*asset, error) {
	bytes, err := templatesStateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/state.gotemplate", size: 612, mode: os.FileMode(436), modTime: time.Unix(1534751328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/init.gotemplate":  templatesInitGotemplate,
	"templates/state.gotemplate": templatesStateGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"init.gotemplate":  &bintree{templatesInitGotemplate, map[string]*bintree{}},
		"state.gotemplate": &bintree{templatesStateGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
